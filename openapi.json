{
    "openapi": "3.1.0",
    "info": {
        "title": "Chalo APIs Document",
        "version": "1.0",
        "description": "เอกสารนี้ถูกออกแบบมาเพื่อให้ข้อมูลและคำแนะนำที่จำเป็นในการเข้าถึงและใช้งาน API ของ Chalo อย่างง่ายดายและมีประสิทธิภาพ เหมาะสำหรับนักพัฒนาและผู้ใช้งานที่ต้องการเชื่อมต่อกับระบบของ Chalo โดยเฉพาะ เอกสารนี้จะช่วยให้คุณเข้าใจถึงโครงสร้างและฟังก์ชันของ API โดยเริ่มตั้งแต่การติดตั้งและตั้งค่าพื้นฐาน วิธีการเชื่อมต่อกับ API พร้อมทั้งคำอธิบายของแต่ละ Endpoint ที่มีอยู่ ซึ่งแต่ละ Endpoint จะถูกอธิบายอย่างละเอียดเพื่อให้คุณสามารถใช้งานได้อย่างเต็มประสิทธิภาพ ไม่ว่าจะเป็นการดึงข้อมูล การส่งคำขอ หรือการจัดการกับข้อมูลต่าง ๆ ในระบบ นอกจากนี้ยังมีคำแนะนำเกี่ยวกับการจัดการข้อผิดพลาดและวิธีการแก้ไขปัญหาต่าง ๆ ที่อาจเกิดขึ้นระหว่างการใช้งาน เพื่อให้แน่ใจว่าผู้ใช้งานสามารถทำงานได้อย่างราบรื่นและไม่เกิดปัญหาในการเชื่อมต่อกับ API ของ Chalo",
        "x-logo": {
            "url": "https://cdn-icons-png.flaticon.com/128/15665/15665844.png",
            "altText": "Chalo Logo",
            "backgroundColor": "#FFFFFF"
        }
    },
    "servers": [
    {
        "url": "https://chalo.click",
        "description": "Chalo API"
    },
    {
        "url": "http://192.168.10.166:8000",
        "description": "Chalo API IP addres"
    },
    {
        "url": "http://127.0.0.1:8000",
        "description": "Chalo API localhost"
    },
    {
        "url": "https://fast-w9y8.onrender.com",
        "description": "Chalo API localhost"
    }
    ],
    "paths": {
        "/api/v1/token": {
        "post": {
            "tags": [
            "Authentication"
            ],
            "summary": "Create Token",
            "description": "This endpoint is responsible for creating a token. It receives a string name and returns a token.",
            "operationId": "create_token_api_v1_token_post",
            "requestBody": {
            "content": {
                "application/json": {
                "schema": {
                    "$ref": "#/components/schemas/TokenRequest"
                }
                }
            },
            "required": true
            },
            "responses": {
            "200": {
                "description": "Successful Response",
                "content": {
                "application/json": {
                    "schema": {

                    }
                }
                }
            },
            "422": {
                "description": "Validation Error",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
                }
            }
            }
        }
        },
        "/api/v1/github/accident/heatmap-rvp-death": {
        "get": {
            "tags": [
            "Github"
            ],
            "summary": "Geojson From Github Heatmap Rvp Death",
            "description": "Endpoint to fetch **GeoJSON** data from GITHUB `heatmap-rvp-death.geojson`, \nit will include metadata about the file, mean total number to be awarded and prepare to return in **GeoJSON**.",
            "operationId": "geojson_from_github_heatmap_rvp_death_api_v1_github_accident_heatmap_rvp_death_get",
            "security": [
            {
                "HTTPBearer": []
            }
            ],
            "parameters": [
            {
                "name": "limit",
                "in": "query",
                "required": false,
                "schema": {
                "type": "integer",
                "minimum": 1,
                "title": "Limit"
                }
            }
            ],
            "responses": {
            "200": {
                "description": "Successful Response",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/StandardResponse"
                    }
                }
                }
            },
            "422": {
                "description": "Validation Error",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
                }
            }
            }
        }
        },
        "/api/v1/github/accident/itic-top200-all-road": {
        "get": {
            "tags": [
            "Github"
            ],
            "summary": "Geojson From Github Select Id",
            "description": "Endpoint to fetch **GeoJSON** data from **GITHUB** `itic-top200-all-road` with filtering by 'no' or 'gid'.",
            "operationId": "geojson_from_github_select_id_api_v1_github_accident_itic_top200_all_road_get",
            "security": [
            {
                "HTTPBearer": []
            }
            ],
            "parameters": [
            {
                "name": "no",
                "in": "query",
                "required": false,
                "schema": {
                "anyOf": [
                    {
                    "type": "integer"
                    },
                    {
                    "type": "null"
                    }
                ],
                "title": "No"
                }
            },
            {
                "name": "gid",
                "in": "query",
                "required": false,
                "schema": {
                "anyOf": [
                    {
                    "type": "integer"
                    },
                    {
                    "type": "null"
                    }
                ],
                "title": "Gid"
                }
            }
            ],
            "responses": {
            "200": {
                "description": "Successful Response",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/StandardResponse"
                    }
                }
                }
            },
            "422": {
                "description": "Validation Error",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
                }
            }
            }
        }
        },
        "/api/v1/github/accident/data/select": {
        "get": {
            "tags": [
            "Github"
            ],
            "summary": "Github Selects Data Endpoint",
            "description": "Endpoint is to get GEOJSON data from GITHUB, and can select the file to open from the file data_(select one number 0-9) parameter.",
            "operationId": "github_selects_data_endpoint_api_v1_github_accident_data_select_get",
            "security": [
            {
                "HTTPBearer": []
            }
            ],
            "parameters": [
            {
                "name": "file",
                "in": "query",
                "required": true,
                "schema": {
                "type": "string",
                "description": "Name of the GeoJSON file",
                "title": "File"
                },
                "description": "Name of the GeoJSON file"
            }
            ],
            "responses": {
            "200": {
                "description": "Successful Response",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/StandardResponse"
                    }
                }
                }
            },
            "422": {
                "description": "Validation Error",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
                }
            }
            }
        }
        },
         "/api/v1/pgDBs/places/th": {
      "get": {
        "tags": [
          "postgres"
        ],
        "summary": "Get Places",
        "description": "Endpoint Find places around me within a specified radius, with region filter\n- **limit** Limit the data display, start at 1\n- **offset** Start displaying data from the specified value, start at 0\n- **lat** **lon** The desired coordinate as the center point\n- **radius** The radius to search around, in meters\n- **region** Find only places in the specified region",
        "operationId": "get_places_api_v1_pgDBs_places_th_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Number of records to retrieve",
              "default": 1000,
              "title": "Limit"
            },
            "description": "Number of records to retrieve"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of records to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of records to skip"
          },
          {
            "name": "lat",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Latitude of the user",
              "title": "Lat"
            },
            "description": "Latitude of the user"
          },
          {
            "name": "lon",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Longitude of the user",
              "title": "Lon"
            },
            "description": "Longitude of the user"
          },
          {
            "name": "radius",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Search radius in meters",
              "title": "Radius"
            },
            "description": "Search radius in meters"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Region to filter results",
              "title": "Region"
            },
            "description": "Region to filter results"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "postgres"
        ],
        "summary": "Import Places",
        "description": "Endpoint is to read the .parquet file and save the data to the places_th table.**",
        "operationId": "import_places_api_v1_pgDBs_places_th_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pgDBs/places/th/hexagon-lv6": {
      "get": {
        "tags": [
          "postgres"
        ],
        "summary": "Get Places",
        "description": "This endpoint is to fetch data from the table named places_h3_lv6 to display.\n- **limit** Limits the display of data, starting at 1\n- **offset** Start displaying data from the specified value, starting at 0",
        "operationId": "get_places_api_v1_pgDBs_places_th_hexagon_lv6_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Number of records to retrieve",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of records to retrieve"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of records to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of records to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pgDBs/places/th/hexagon": {
        "get": {
            "tags": [
            "postgres"
            ],
            "summary": "Convert Geojson To H3",
            "description": "This endpoint will fetch POI data from the cloud database and process it to create a hexagon.",
            "operationId": "convert_geojson_to_h3_api_v1_pgDBs_places_th_hexagon_get",
            "responses": {
            "200": {
                "description": "Successful Response",
                "content": {
                "application/json": {
                    "schema": {
                    "$ref": "#/components/schemas/StandardResponse"
                    }
                }
                }
            }
            },
            "security": [
            {
                "HTTPBearer": []
            }
            ]
        }
    },
    "/api/v1/route_to_place": {
      "get": {
        "tags": [
          "route"
        ],
        "summary": "Get Route To Place",
        "description": "This endpoint is a calculation of the route from the starting point to the destination point. The parameters in the query are as follows:\n- start_lat is to set the Latitude coordinate of the starting point.\n- start_lon is to set the Longitude coordinate of the starting point.\n- end_lat is to set the Latitude coordinate of the starting point.\n- end_lon is to set the Longitude coordinate of the starting point.\n- place_name is to enter the shop name. Then, it will search for the shop name that matches the Cloud database. When it is found, it will take the Latitude and Longitude coordinates of the shop from the database to calculate the route.",
        "operationId": "get_route_to_place_api_v1_route_to_place_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_lat",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Latitude จุดเริ่มต้น",
              "title": "Start Lat"
            },
            "description": "Latitude จุดเริ่มต้น"
          },
          {
            "name": "start_lon",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Longitude จุดเริ่มต้น",
              "title": "Start Lon"
            },
            "description": "Longitude จุดเริ่มต้น"
          },
          {
            "name": "place_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ชื่อร้านที่ต้องการไป",
              "title": "Place Name"
            },
            "description": "ชื่อร้านที่ต้องการไป"
          },
          {
            "name": "end_lat",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Latitude ปลายทาง",
              "title": "End Lat"
            },
            "description": "Latitude ปลายทาง"
          },
          {
            "name": "end_lon",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Longitude ปลายทาง",
              "title": "End Lon"
            },
            "description": "Longitude ปลายทาง"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/opendeve/places/hospi": {
      "get": {
        "tags": [
          "opendevelopmentmekong"
        ],
        "summary": "Get Hospital",
        "description": "Endpoint will fetch data from external data sources that are freely available.\n- **limit**: Number of records to fetch (minimum 1)",
        "operationId": "get_hospital_api_v1_opendeve_places_hospi_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/opendeve/places/excise_department": {
      "get": {
        "tags": [
          "opendevelopmentmekong"
        ],
        "summary": "Get Excise Department",
        "description": "Endpoint will fetch data from external data sources that are freely available.\n- **limit**: Number of records to fetch (minimum 1)",
        "operationId": "get_excise_department_api_v1_opendeve_places_excise_department_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/opendeve/places/reservoir": {
      "get": {
        "tags": [
          "opendevelopmentmekong"
        ],
        "summary": "Get Reservoir",
        "description": "Endpoint will fetch data from external data sources that are freely available.\n- **limit**: Number of records to fetch (minimum 1)",
        "operationId": "get_reservoir_api_v1_opendeve_places_reservoir_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/opendeve/places/well_water": {
      "get": {
        "tags": [
          "opendevelopmentmekong"
        ],
        "summary": "Get Well Water",
        "description": "Endpoint will fetch data from external data sources that are freely available.\n- **limit**: Number of records to fetch (minimum 1)",
        "operationId": "get_well_water_api_v1_opendeve_places_well_water_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
    },
    "components": {
        "schemas": {
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "StandardResponse": {
                "properties": {
                    "status": {
                        "type": "string",
                        "title": "Status",
                        "default": "success"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "data": {
                        "anyOf": [
                            {},
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Data"
                    },
                    "metadata": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Metadata"
                    }
                },
                "type": "object",
                "required": [
                    "message"
                ],
                "title": "StandardResponse"
            },
            "TokenRequest": {
                "properties": {
                    "username": {
                        "type": "string",
                        "title": "Username"
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ],
                "title": "TokenRequest"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
}
